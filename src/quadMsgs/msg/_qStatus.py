# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadMsgs/qStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class qStatus(genpy.Message):
  _md5sum = "3f48c09f9ab6c47f423fbfa407f4d9a0"
  _type = "quadMsgs/qStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 qID
float32 qM1
float32 qM2
float32 qM3
float32 qM4
float32 qXa
float32 qYa
float32 qZa
float32 qXg
float32 qYg
float32 qZg
"""
  __slots__ = ['qID','qM1','qM2','qM3','qM4','qXa','qYa','qZa','qXg','qYg','qZg']
  _slot_types = ['uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       qID,qM1,qM2,qM3,qM4,qXa,qYa,qZa,qXg,qYg,qZg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(qStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.qID is None:
        self.qID = 0
      if self.qM1 is None:
        self.qM1 = 0.
      if self.qM2 is None:
        self.qM2 = 0.
      if self.qM3 is None:
        self.qM3 = 0.
      if self.qM4 is None:
        self.qM4 = 0.
      if self.qXa is None:
        self.qXa = 0.
      if self.qYa is None:
        self.qYa = 0.
      if self.qZa is None:
        self.qZa = 0.
      if self.qXg is None:
        self.qXg = 0.
      if self.qYg is None:
        self.qYg = 0.
      if self.qZg is None:
        self.qZg = 0.
    else:
      self.qID = 0
      self.qM1 = 0.
      self.qM2 = 0.
      self.qM3 = 0.
      self.qM4 = 0.
      self.qXa = 0.
      self.qYa = 0.
      self.qZa = 0.
      self.qXg = 0.
      self.qYg = 0.
      self.qZg = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I10f().pack(_x.qID, _x.qM1, _x.qM2, _x.qM3, _x.qM4, _x.qXa, _x.qYa, _x.qZa, _x.qXg, _x.qYg, _x.qZg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.qID, _x.qM1, _x.qM2, _x.qM3, _x.qM4, _x.qXa, _x.qYa, _x.qZa, _x.qXg, _x.qYg, _x.qZg,) = _get_struct_I10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I10f().pack(_x.qID, _x.qM1, _x.qM2, _x.qM3, _x.qM4, _x.qXa, _x.qYa, _x.qZa, _x.qXg, _x.qYg, _x.qZg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.qID, _x.qM1, _x.qM2, _x.qM3, _x.qM4, _x.qXa, _x.qYa, _x.qZa, _x.qXg, _x.qYg, _x.qZg,) = _get_struct_I10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I10f = None
def _get_struct_I10f():
    global _struct_I10f
    if _struct_I10f is None:
        _struct_I10f = struct.Struct("<I10f")
    return _struct_I10f
