# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadMsgs/qParameters.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class qParameters(genpy.Message):
  _md5sum = "e6c5da4d4ba5b3b45d6ca7e2e598338b"
  _type = "quadMsgs/qParameters"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 qID
int32 qThrottle
int32 qP
int32 qI
int32 qD
int32 qPA
"""
  __slots__ = ['qID','qThrottle','qP','qI','qD','qPA']
  _slot_types = ['uint32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       qID,qThrottle,qP,qI,qD,qPA

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(qParameters, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.qID is None:
        self.qID = 0
      if self.qThrottle is None:
        self.qThrottle = 0
      if self.qP is None:
        self.qP = 0
      if self.qI is None:
        self.qI = 0
      if self.qD is None:
        self.qD = 0
      if self.qPA is None:
        self.qPA = 0
    else:
      self.qID = 0
      self.qThrottle = 0
      self.qP = 0
      self.qI = 0
      self.qD = 0
      self.qPA = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I5i().pack(_x.qID, _x.qThrottle, _x.qP, _x.qI, _x.qD, _x.qPA))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.qID, _x.qThrottle, _x.qP, _x.qI, _x.qD, _x.qPA,) = _get_struct_I5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I5i().pack(_x.qID, _x.qThrottle, _x.qP, _x.qI, _x.qD, _x.qPA))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.qID, _x.qThrottle, _x.qP, _x.qI, _x.qD, _x.qPA,) = _get_struct_I5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I5i = None
def _get_struct_I5i():
    global _struct_I5i
    if _struct_I5i is None:
        _struct_I5i = struct.Struct("<I5i")
    return _struct_I5i
